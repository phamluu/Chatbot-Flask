from tkinter import Message
import traceback
import uuid
from flask_login import current_user
from flask_security import roles_required, login_required
from flask import Blueprint, app, request, jsonify, render_template, session
from flask_wtf import CSRFProtect
from app.models import Conversation
from app.services.chat_service import get_messages_by_conversation_id, get_or_create_open_conversation, handle_delete_conversation, handle_new_msg, is_staff_active_in_conversation, update_conversation_staff
from app.services.chatbot_service import process_message
from app.extensions import csrf 
from app.extensions import socketio
from flask_socketio import emit

chatbot_api = Blueprint('chatbot_api', __name__) #endpoint: chatbot_api
# admin_active = False
active_sessions = {}
pending_messages = []  # l∆∞u tin nh·∫Øn ch·ªù admin x·ª≠ l√Ω

#User
@chatbot_api.route("/", methods=["GET"])
def chatbot_view():
    user_id = session.get("user_id") # id c·ªßa ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o ng·∫´u nhi√™n v√† l∆∞u trong session
    if not user_id:
        user_id = str(uuid.uuid4())
        session["user_id"] = user_id
    # üîπ 2. L·∫•y ho·∫∑c t·∫°o h·ªôi tho·∫°i ƒëang m·ªü
    convo = get_or_create_open_conversation(user_id)
    # üîπ 3. L·∫•y danh s√°ch tin nh·∫Øn trong h·ªôi tho·∫°i ƒë√≥
    messages = get_messages_by_conversation_id(convo.id)
    print(f"üÜî User ID: {user_id}, H·ªôi tho·∫°i ID: {convo.id}, Tin nh·∫Øn: {len(messages)}")
    # üîπ 5. Tr·∫£ v·ªÅ giao di·ªán k√®m d·ªØ li·ªáu
    return render_template("chatbot.html", conversation=convo,messages=messages)

# g·ª≠i tin nh·∫Øn
@chatbot_api.route("/api/send", methods=["POST"])
def send_message():
    if not request.is_json:
        return jsonify({"response": "‚ö†Ô∏è Request kh√¥ng ph·∫£i JSON.", "source": "error"}), 400
    data = request.get_json(silent=True)
    message = data.get("message", "").strip() if data else ""
    user_id = session.get("user_id")
    if not user_id:
        user_id = str(uuid.uuid4())
        session["user_id"] = user_id
    if not message:
        return jsonify({"response": "‚ùó Vui l√≤ng nh·∫≠p n·ªôi dung.", "source": "error"}), 400
    try:
        convo = get_or_create_open_conversation(user_id)
        handle_new_msg(
            user_id,          
            convo.id,         
            message,          
            "user"            
        )
        socketio.emit(
            'new_message',
            {
                "conversation_id": convo.id,
                "sender": "user",
                "message": message
            },
            to=None
        )
        return jsonify({
            "response": "‚úÖ Tin nh·∫Øn ƒë√£ g·ª≠i th√†nh c√¥ng.",
            "conversation_id": convo.id,
            "source": "success"
        }), 200
    except Exception as e:
        print("‚ùå L·ªói trong chat_api:", e)
        traceback.print_exc()
        return jsonify({"response": "‚ùå L·ªói n·ªôi b·ªô server.", "source": "error"}), 500

# Ki·ªÉm tra tr·∫°ng th√°i admin ƒë·ªÉ ph·∫£n h·ªìi t·ª± ƒë·ªông n·∫øu c·∫ßn
@chatbot_api.route("/api/response", methods=["POST"])
def response_message():
    global pending_messages
    if not request.is_json:
        #print("‚ùå Request kh√¥ng ph·∫£i JSON.")
        return jsonify({"response": "‚ö†Ô∏è Request kh√¥ng ph·∫£i JSON.", "source": "error"}), 400
    data = request.get_json(silent=True)
    message = data.get("message", "").strip() if data else ""
    user_id = session.get("user_id")
    if not user_id:
        user_id = str(uuid.uuid4())
        session["user_id"] = user_id
    if not message:
        #print("‚ùå Thi·∫øu message.")
        return jsonify({"response": "‚ùó Vui l√≤ng nh·∫≠p n·ªôi dung.", "source": "error"}), 400
    try:
        convo = get_or_create_open_conversation(user_id)
        # Ki·ªÉm tra c√≥ nh√¢n vi√™n trong h·ªôi tho·∫°i kh√¥ng
        admin_active = is_staff_active_in_conversation(convo.id)
        if not admin_active:
                response_data = process_message(message)
                handle_new_msg("", convo.id,  response_data["response"], "bot")
                socketio.emit(
                    'new_message',
                    {
                        "conversation_id": convo.id,
                        "sender": "bot",
                        "message": response_data["response"]
                    },
                    to=None
                )
                return jsonify(response_data)
        else:
            # admin ƒëang online ‚Üí ch·ªù admin ph·∫£n h·ªìi
            pending_messages.append({"conversation_id": convo.id, "message": message})
            return jsonify({
                "response": "Tin nh·∫Øn ƒë√£ g·ª≠i ƒë·∫øn admin, vui l√≤ng ch·ªù ph·∫£n h·ªìi.",
                "source": "waiting"
            })
    except Exception as e:
        print("‚ùå L·ªói trong chat_api:", e)
        traceback.print_exc()
        return jsonify({"response": "‚ùå L·ªói n·ªôi b·ªô server.", "source": "error"}), 500


# Admin
# Admin xem chi ti·∫øt h·ªôi tho·∫°i
@chatbot_api.route("/chat/<int:conversation_id>")
def view_conversation(conversation_id):
    convo = Conversation.query.get_or_404(conversation_id)
    messages = get_messages_by_conversation_id(convo.id)
    #admin_active = session.get(f"admin_active_{conversation_id}", False)
    admin_active = is_staff_active_in_conversation(convo.id)
    #t·∫°m
    #key = f"admin_active_{conversation_id}"
    print(f"session h·ªôi tho·∫°i 1: üîÑ {admin_active}")
    #end t·∫°m
    return render_template("chat_detail.html", conversation=convo, messages=messages, admin_active=admin_active)

# Admin g·ª≠i tin nh·∫Øn trong h·ªôi tho·∫°i
@csrf.exempt
@chatbot_api.route("/chat/<int:conversation_id>", methods=["POST"])
def chat_admin(conversation_id):
    # L∆∞u tin nh·∫Øn v√†o h·ªôi tho·∫°i
    # N·∫øu admin th√¨ tr·∫£ l·ªùi v√† l∆∞u v√†o h·ªôi tho·∫°i
    # N·∫øu admin ch∆∞a active th√¨ chatbot tr·∫£ l·ªùi
    # Gi·∫£ l·∫≠p tr·∫°ng th√°i admin
    global pending_messages

    if not request.is_json:
        #print("‚ùå Request kh√¥ng ph·∫£i JSON.")
        return jsonify({"response": "‚ö†Ô∏è Request kh√¥ng ph·∫£i JSON.", "source": "error"}), 400

    data = request.get_json(silent=True)
    message = data.get("message", "").strip() if data else ""
    
    if not message:
        return jsonify({"response": "‚ùó Thi·∫øu message.", "source": "error"}), 400

    #print("üì© Nh·∫≠n message:", message)

    try:
        #L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o DB
        handle_new_msg(
            "",          
            conversation_id,         
            message,          
            "admin"            
        )
        # G·ª≠i s·ª± ki·ªán real-time cho user n·∫øu c√≥ k·∫øt n·ªëi
        socketio.emit(
            'new_message',
            {
                "conversation_id": conversation_id,
                "sender": "admin",
                "message": message
            },
            to=None
        )

        pending_messages.append({"user_id": "", "message": message})
        return jsonify({"response": message, "source": "waiting"})
        
    except Exception as e:
        print("‚ùå L·ªói trong chat_api:", e)
        traceback.print_exc()
        return jsonify({"response": "‚ùå L·ªói n·ªôi b·ªô server.", "source": "error"}), 500

# bot chuy·ªÉn tr·∫°ng th√°i admin active hay kh√¥ng active
@csrf.exempt
@chatbot_api.route("/chat/bot/<int:conversation_id>", methods=["POST"])
def chat_bot(conversation_id):
    global pending_messages
    if not request.is_json:
        return jsonify({"response": "‚ö†Ô∏è Request kh√¥ng ph·∫£i JSON.", "source": "error"}), 400
    data = request.get_json(silent=True)
    status = data.get("message", "").strip() if data else ""
    if not status:
        return jsonify({"response": "‚ùó Thi·∫øu message.", "source": "error"}), 400
    try:
        # üîπ X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i
        if status == "active":
            # C·∫≠p nh·∫≠t id nh√¢n vi√™n v√†o database
            # L·∫•y iduser ƒëang ƒëƒÉng nh·∫≠p
            staff_id = current_user.id
            update_conversation_staff(conversation_id, staff_id)
            active_sessions[conversation_id] = True
            session[f"admin_active_{conversation_id}"] = True 
            message = "Admin ƒë√£ tham gia cu·ªôc tr√≤ chuy·ªán."
        elif status == "inactive":
            update_conversation_staff(conversation_id, None)
            active_sessions[conversation_id] = False
            session[f"admin_active_{conversation_id}"] = False
            message = "Admin ƒë√£ k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán."
        

        handle_new_msg("", conversation_id, message, "bot")
        socketio.emit(
            "new_message",
            {
                "conversation_id": conversation_id,
                "sender": "bot",
                "message": message
            },
            to=None
        )

        # üîπ G·ª≠i th√™m s·ª± ki·ªán ri√™ng ƒë·ªÉ sidebar c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªôi tho·∫°i
        # socketio.emit(
        #     "conversation_status",
        #     {
        #         "conversation_id": conversation_id,
        #         "status": "active" if active_sessions.get(conversation_id) else "inactive"
        #     },
        #     broadcast=True
        # )

        pending_messages.append({"user_id": "", "message": message})

        return jsonify({"response": message, "source": "status_updated"})
        
    except Exception as e:
        print("‚ùå L·ªói trong chat_api:", e)
        traceback.print_exc()
        return jsonify({"response": "‚ùå L·ªói n·ªôi b·ªô server.", "source": "error"}), 500

# Admin x√≥a h·ªôi tho·∫°i
@chatbot_api.route('/api/conversation/<int:conversation_id>', methods=['DELETE'])
@csrf.exempt
def delete_conversation(conversation_id):
    convo = Conversation.query.get(conversation_id)
    if not convo:
        return jsonify({"error": "Conversation not found"}), 404
    handle_delete_conversation(conversation_id)

    # n·∫øu d√πng socket ƒë·ªÉ broadcast thay ƒë·ªïi, emit event ·ªü ƒë√¢y (tu·ª≥ c√°ch tri·ªÉn khai)
    # socketio.emit('conversation_deleted', {'conversation_id': conversation_id}, broadcast=True)

    return jsonify({"message": "Conversation deleted"}), 200